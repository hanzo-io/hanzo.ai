{"version":3,"file":"executive.mjs","sources":["../node_modules/es-is/src/index.coffee","../src/buffer-stream.coffee","../src/utils.coffee","../src/parse.coffee","../src/exec.coffee","../src/execSync.coffee","../src/flow.coffee","../src/executive.coffee","../src/index.coffee"],"sourcesContent":["# The definitive JavaScript type testing library\n#\n# @copyright 2013-2014 Enrico Marino / Jordan Harband\n# @license MIT\n\nobjProto      = Object.prototype\nowns          = objProto.hasOwnProperty\ntoStr         = objProto.toString\nsymbolValueOf = undefined\nif typeof Symbol == 'function'\n  symbolValueOf = Symbol::valueOf\n\nisActualNaN = (value) ->\n  value != value\n\nNON_HOST_TYPES =\n  'boolean': 1\n  number:    1\n  string:    1\n  undefined: 1\n\nbase64Regex = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/\nhexRegex    = /^[A-Fa-f0-9]+$/\n\n# Test if `value` is a type of `type`.\n#\n# @param {Mixed} value value to test\n# @param {String} type type\n# @return {Boolean} true if `value` is a type of `type`, false otherwise\n# @api public\nexport isType = (value, type) ->\n  typeof value == type\n\n# Test if `value` is defined.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if 'value' is defined, false otherwise\n# @api public\nexport isDefined = (value) ->\n  typeof value != 'undefined'\n\n# Test if `value` is empty.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is empty, false otherwise\n# @api public\nexport isEmpty = (value) ->\n  type = toStr.call value\n  if type == '[object Array]' or type == '[object Arguments]' or type == '[object String]'\n    return value.length == 0\n\n  if type == '[object Object]'\n    for key of value\n      if owns.call value, key\n        return false\n    return true\n\n  !value\n\n# Test if `value` is equal to `other`.\n#\n# @param {Mixed} value value to test\n# @param {Mixed} other value to compare with\n# @return {Boolean} true if `value` is equal to `other`, false otherwise\nexport isEqual = (value, other) ->\n  return true if value == other\n\n  type = toStr.call value\n\n  if type != toStr.call(other)\n    return false\n\n  if type == '[object Object]'\n    for key of value\n      if !isEqual(value[key], other[key]) or !(key of other)\n        return false\n    for key of other\n      if !isEqual(value[key], other[key]) or !(key of value)\n        return false\n    return true\n\n  if type == '[object Array]'\n    key = value.length\n    if key != other.length\n      return false\n    while key--\n      if !isEqual(value[key], other[key])\n        return false\n    return true\n\n  if type == '[object Function]'\n    return value.prototype == other.prototype\n\n  if type == '[object Date]'\n    return value.getTime() == other.getTime()\n\n  false\n\n# Test if `value` is hosted by `host`.\n#\n# @param {Mixed} value to test\n# @param {Mixed} host host to test with\n# @return {Boolean} true if `value` is hosted by `host`, false otherwise\n# @api public\nexport isHosted = (value, host) ->\n  type = typeof host[value]\n  if type == 'object' then ! !host[value] else !NON_HOST_TYPES[type]\n\n# Test if `value` is an instance of `constructor`.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an instance of `constructor`\n# @api public\nexport isInstanceof = (value, constructor) ->\n  value instanceof constructor\n\n# Test if `value` is null.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is null, false otherwise\n# @api public\nexport isNil = (value) ->\n  value == null\n\n# Test if `value` is undefined.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is undefined, false otherwise\n# @api public\n\nexport isUndefined = (value) ->\n  typeof value == 'undefined'\n\n# Test if `value` is an arraylike object.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an arguments object, false otherwise\n# @api public\nexport isArrayLike = (value) ->\n  !!value and !isBool(value) and owns.call(value, 'length') and isFinite(value.length) and isNumber(value.length) and value.length >= 0\n\n# Test if `value` is an arguments object.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an arguments object, false otherwise\n# @api public\nexport isArguments = isArgs = (value) ->\n  isStandardArguments = toStr.call(value) == '[object Arguments]'\n  isOldArguments = !isArray(value) and isArrayLike(value) and isObject(value) and isFn(value.callee)\n  isStandardArguments or isOldArguments\n\n# Test if 'value' is an array.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an array, false otherwise\n# @api public\nexport isArray = Array.isArray or (value) ->\n  toStr.call(value) == '[object Array]'\n\n# Test if `value` is an empty arguments object.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an empty arguments object, false otherwise\n# @api public\nexport isEmptyArgs = (value) ->\n  isArgs(value) and value.length == 0\n\n# Test if `value` is an empty array.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an empty array, false otherwise\n# @api public\nexport isEmptyArray = (value) ->\n  isArray(value) and value.length == 0\n\n# Test if `value` is a boolean.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a boolean, false otherwise\n# @api public\nexport isBool = (value) ->\n  toStr.call(value) == '[object Boolean]'\n\n# Test if `value` is false.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is false, false otherwise\n# @api public\nexport isFalse = (value) ->\n  isBool(value) and Boolean(Number(value)) == false\n\n# Test if `value` is true.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is true, false otherwise\n# @api public\nexport isTrue = (value) ->\n  isBool(value) and Boolean(Number(value)) == true\n\n# Test date.\n\n# Test if `value` is a date.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a date, false otherwise\n# @api public\nexport isDate = (value) ->\n  toStr.call(value) == '[object Date]'\n\n# Test if `value` is a valid date.\n#\n# @param {Mixed} value value to test\n# @returns {Boolean} true if `value` is a valid date, false otherwise\nexport isValidDate = (value) ->\n  isDate(value) and !isNaN(Number(value))\n\n# Test if `value` is an html element.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an HTML Element, false otherwise\n# @api public\nexport isElement = (value) ->\n  value != undefined and typeof HTMLElement != 'undefined' and value instanceof HTMLElement and value.nodeType == 1\n\n# Test if `value` is an error object.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an error object, false otherwise\n# @api public\nexport isError = (value) ->\n  toStr.call(value) == '[object Error]'\n\n# Test if `value` is a function.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a function, false otherwise\n# @api public\nexport isFunction = isFn = (value) ->\n  isAlert = typeof window != 'undefined' and value == window.alert\n  if isAlert\n    return true\n  str = toStr.call(value)\n  str == '[object Function]' or str == '[object GeneratorFunction]' or str == '[object AsyncFunction]'\n\n# Test if `value` is a number.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a number, false otherwise\n# @api public\nexport isNumber = (value) ->\n  toStr.call(value) == '[object Number]'\n\n# Test if `value` is positive or negative infinity.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is positive or negative Infinity, false otherwise\n# @api public\nexport isInfinite = (value) ->\n  value == Infinity or value == -Infinity\n\n# Test if `value` is a decimal number.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a decimal number, false otherwise\n# @api public\nexport isDecimal = (value) ->\n  isNumber(value) and !isActualNaN(value) and !isInfinite(value) and value % 1 != 0\n\n# Test if `value` is divisible by `n`.\n#\n# @param {Number} value value to test\n# @param {Number} n dividend\n# @return {Boolean} true if `value` is divisible by `n`, false otherwise\n# @api public\nexport isDivisibleBy = (value, n) ->\n  isDividendInfinite = isInfinite(value)\n  isDivisorInfinite = isInfinite(n)\n  isNonZeroNumber = isNumber(value) and !isActualNaN(value) and isNumber(n) and !isActualNaN(n) and n != 0\n  isDividendInfinite or isDivisorInfinite or isNonZeroNumber and value % n == 0\n\n# Test if `value` is an integer.\n#\n# @param value to test\n# @return {Boolean} true if `value` is an integer, false otherwise\n# @api public\nexport isInteger = (value) ->\n  isNumber(value) and !isActualNaN(value) and value % 1 == 0\n\n# Test if `value` is greater than 'others' values.\n#\n# @param {Number} value value to test\n# @param {Array} others values to compare with\n# @return {Boolean} true if `value` is greater than `others` values\n# @api public\nexport isMaximum = (value, others) ->\n  if isActualNaN(value)\n    throw new TypeError('NaN is not a valid value')\n  else if !isArrayLike(others)\n    throw new TypeError('second argument must be array-like')\n  len = others.length\n  while --len >= 0\n    if value < others[len]\n      return false\n  true\n\n# Test if `value` is less than `others` values.\n#\n# @param {Number} value value to test\n# @param {Array} others values to compare with\n# @return {Boolean} true if `value` is less than `others` values\n# @api public\nexport isMinimum = (value, others) ->\n  if isActualNaN(value)\n    throw new TypeError('NaN is not a valid value')\n  else if !isArrayLike(others)\n    throw new TypeError('second argument must be array-like')\n  len = others.length\n  while --len >= 0\n    if value > others[len]\n      return false\n  true\n\n# Test if `value` is not a number.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is not a number, false otherwise\n# @api public\nexport isNan = (value) ->\n  isNumber(value) or value != value\n\n# Test if `value` is an even number.\n#\n# @param {Number} value value to test\n# @return {Boolean} true if `value` is an even number, false otherwise\n# @api public\nexport isEven = (value) ->\n  isInfinite(value) or isNumber(value) and value == value and value % 2 == 0\n\n# Test if `value` is an odd number.\n#\n# @param {Number} value value to test\n# @return {Boolean} true if `value` is an odd number, false otherwise\n# @api public\nexport isOdd = (value) ->\n  isInfinite(value) or isNumber(value) and value == value and value % 2 != 0\n\n# Test if `value` is greater than or equal to `other`.\n#\n# @param {Number} value value to test\n# @param {Number} other value to compare with\n# @return {Boolean}\n# @api public\nexport isGe = (value, other) ->\n  if isActualNaN(value) or isActualNaN(other)\n    throw new TypeError('NaN is not a valid value')\n  !isInfinite(value) and !isInfinite(other) and value >= other\n\n# Test if `value` is greater than `other`.\n#\n# @param {Number} value value to test\n# @param {Number} other value to compare with\n# @return {Boolean}\n# @api public\nexport isGt = (value, other) ->\n  if isActualNaN(value) or isActualNaN(other)\n    throw new TypeError('NaN is not a valid value')\n  !isInfinite(value) and !isInfinite(other) and value > other\n\n# Test if `value` is less than or equal to `other`.\n#\n# @param {Number} value value to test\n# @param {Number} other value to compare with\n# @return {Boolean} if 'value' is less than or equal to 'other'\n# @api public\nexport isLe = (value, other) ->\n  if isActualNaN(value) or isActualNaN(other)\n    throw new TypeError('NaN is not a valid value')\n  !isInfinite(value) and !isInfinite(other) and value <= other\n\n# Test if `value` is less than `other`.\n#\n# @param {Number} value value to test\n# @param {Number} other value to compare with\n# @return {Boolean} if `value` is less than `other`\n# @api public\nexport isLt = (value, other) ->\n  if isActualNaN(value) or isActualNaN(other)\n    throw new TypeError('NaN is not a valid value')\n  !isInfinite(value) and !isInfinite(other) and value < other\n\n# Test if `value` is within `start` and `finish`.\n#\n# @param {Number} value value to test\n# @param {Number} start lower bound\n# @param {Number} finish upper bound\n# @return {Boolean} true if 'value' is is within 'start' and 'finish'\n# @api public\nexport isWithin = (value, start, finish) ->\n  if isActualNaN(value) or isActualNaN(start) or isActualNaN(finish)\n    throw new TypeError('NaN is not a valid value')\n  else if !isNumber(value) or !isNumber(start) or !isNumber(finish)\n    throw new TypeError('all arguments must be numbers')\n  isAnyInfinite = isInfinite(value) or isInfinite(start) or isInfinite(finish)\n  isAnyInfinite or value >= start and value <= finish\n\n# Test if `value` is an object.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is an object, false otherwise\n# @api public\nexport isObject = (value) ->\n  toStr.call(value) == '[object Object]'\n\n# Test if `value` is a primitive.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a primitive, false otherwise\n# @api public\nexport isPrimitive = (value) ->\n  if !value\n    return true\n  if typeof value == 'object' or isObject(value) or isFn(value) or isArray(value)\n    return false\n  true\n\n# Test if `value` is a promise.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a promise, false otherwise\n# @api public\nexport isPromise = (value) ->\n  !!value and (typeof value == 'object' or typeof value == 'function') and typeof value.then == 'function'\n\n# Test if `value` is a hash - a plain object literal.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a hash, false otherwise\n# @api public\nexport isHash = (value) ->\n  isObject(value) and value.constructor == Object and !value.nodeType and !value.setInterval\n\n# Test if `value` is a regular expression.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a regexp, false otherwise\n# @api public\nexport isRegexp = (value) ->\n  toStr.call(value) == '[object RegExp]'\n\n# Test if `value` is a string.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if 'value' is a string, false otherwise\n# @api public\nexport isString = (value) ->\n  toStr.call(value) == '[object String]'\n\n# Test if `value` is a valid base64 encoded string.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if 'value' is a base64 encoded string, false otherwise\n# @api public\nexport isBase64 = (value) ->\n  isString(value) and (!value.length or base64Regex.test(value))\n\n# Test if `value` is a valid hex encoded string.\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if 'value' is a hex encoded string, false otherwise\n# @api public\nexport isHex = (value) ->\n  isString(value) and (!value.length or hexRegex.test(value))\n\n# Test if `value` is an ES6 Symbol\n#\n# @param {Mixed} value value to test\n# @return {Boolean} true if `value` is a Symbol, false otherise\n# @api public\nexport isSymbol = (value) ->\n  typeof Symbol == 'function' and toStr.call(value) == '[object Symbol]' and typeof symbolValueOf.call(value) == 'symbol'\n\nclassic =\n  type:         isType\n  defined:      isDefined\n  empty:        isEmpty\n  equal:        isEqual\n  hosted:       isHosted\n  'instanceof': isInstanceof\n  instance:     isInstanceof\n  nil:          isNil\n  undefined:    isUndefined\n  undef:        isUndefined\n  'arguments':  isArguments\n  args:         isArguments\n  array:        isArray\n  arraylike:    isArrayLike\n  bool:         isBool\n  false:        isFalse\n  true:         isTrue\n  date:         isDate\n  element:      isElement\n  error:        isError\n  function:     isFunction\n  fn:           isFunction\n  number:       isNumber\n  infinite:     isInfinite\n  decimal:      isDecimal\n  divisibleBy:  isDivisibleBy\n  integer:      isInteger\n  maximum:      isMaximum\n  max:          isMaximum\n  minimum:      isMinimum\n  min:          isMinimum\n  nan:          isNan\n  even:         isEven\n  odd:          isOdd\n  ge:           isGe\n  gt:           isGt\n  le:           isLe\n  lt:           isLt\n  within:       isWithin\n  object:       isObject\n  primitive:    isPrimitive\n  promise:      isPromise\n  hash:         isHash\n  regexp:       isRegexp\n  string:       isString\n  base64:       isBase64\n  hex:          isHex\n  symbol:       isSymbol\n\nclassic.args.empty  = isEmptyArgs\nclassic.array.empty = isEmptyArray\nclassic.date.valid  = isValidDate\n\nexport default classic\n","import Stream from 'stream'\n\nclass BufferStream extends Stream\n  constructor: ->\n    super()\n    @buffer = ''\n    @writable = true\n\n  write: (data) ->\n    @buffer += data\n\n  end: (data) ->\n    @write data if arguments.length\n    @writable = false\n\n  destroy: ->\n    @writable = false\n\n  toString: ->\n    @buffer\n\nexport default BufferStream\n","export isWin = /^win/.test process.platform\n\nexport logError = (err) ->\n  if (err.code is 'ENOENT') and /^spawn/.test err.syscall\n    console.error \"Error: #{err.code}, #{err.syscall}\"\n    console.error \"Make sure '#{err.cmd}' exists and is executable.\"\n\nexport once = (fn) ->\n  ran    = false\n  result = null\n  ->\n    return result if ran\n    ran = true\n    result = fn.apply @, arguments\n    fn = null\n    result\n","import fs         from 'fs'\nimport path       from 'path'\nimport shellQuote from 'shell-quote'\nimport {isString} from 'es-is'\n\nimport {isWin} from './utils'\n\n# Check for any operators/glob patterns\nshellRequired = (args) ->\n  for arg in args\n    unless isString arg\n      return true\n  false\n\nargsString = (s, opts, env) ->\n  args = shellQuote.parse s\n\n  # Parse out enviromental variables\n  while cmd = args.shift()\n    break if (cmd.indexOf '=') is -1\n    [k,v] = cmd.split '=', 2\n    env[k] = v\n\n  # Check for any glob or operators\n  unless isWin\n    if opts.shell? or shellRequired args\n      cmd = opts.shell ? '/bin/sh'\n      args = ['-c', s]\n\n  [cmd, args, env]\n\nargsObject = (obj, opts, env) ->\n  # Here args should be an object.\n  cmd = obj.cmd\n\n  # Merge any specified env vars.\n  env = Object.assign env, obj.env ? {}\n\n  args = obj.args ? []\n\n  [cmd, args, env]\n\nexport default (args, opts = {}) ->\n  # Extend from process.env\n  env = Object.assign process.env, (opts.env ? {})\n\n  # If args is a string, parse it into cmd/args/env.\n  if isString args\n    [cmd, args, env] = argsString args, opts, env\n  else\n    [cmd, args, env] = argsObject args, opts, env\n\n  # Pass env to spawn\n  opts.env = env\n\n  # Hacks to work around Windows oddities.\n  if isWin\n    # Normalize path for Windows\n    cmd = path.normalize cmd\n\n    # Check for a .cmd version and use it if it exists\n    if fs.existsSync cmd_ = cmd + '.cmd'\n      cmd = cmd_\n\n    # Setup arguments for cmd.exe and use that as executable\n    args = ['/c', cmd].concat args\n    cmd = 'cmd.exe'\n\n  [cmd, args, opts]\n","import {spawn} from 'child_process'\n\nimport BufferStream     from './buffer-stream'\nimport parse            from './parse'\nimport {logError, once} from './utils'\n\nexport default (cmd, opts, cb) ->\n  [cmd, args, opts] = parse cmd, opts\n\n  stderr = new BufferStream()\n  stdout = new BufferStream()\n\n  child = spawn cmd, args,\n    cwd:      opts.cwd\n    env:      opts.env\n    stdio:    opts.stdio ? [0, 'pipe', 'pipe']\n    detached: opts.detached\n    uid:      opts.uid\n    gid:      opts.gid\n\n  child.setMaxListeners 0\n  child.stdout.setEncoding opts.encoding ? 'utf8'\n  child.stderr.setEncoding opts.encoding ? 'utf8'\n\n  # Buffer stderr, stdout\n  unless opts.interactive\n    child.stdout.pipe stdout\n    child.stderr.pipe stderr\n\n  # Echo out as well\n  unless opts.quiet\n    child.stdout.pipe process.stdout\n    child.stderr.pipe process.stderr\n\n  done = once (err, status) ->\n    stdout.destroy()\n    stderr.destroy()\n    child.kill()\n\n    stdout = stdout.toString()\n    stderr = stderr.toString()\n\n    if err?\n      err.cmd    = cmd\n      err.args   = args\n      err.stdout = stdout\n      err.stderr = stderr\n      err.status = status\n      logError err unless opts.quiet\n\n    cb err, stdout, stderr, status\n\n  exit = once (status, signal) ->\n    err = null\n\n    unless status is 0\n      err = new Error \"Command failed, '#{cmd}' exited with status #{status}\"\n      err.signal = signal\n\n    done err, status\n\n  # Close fires after exit so we are relying on it for now.\n  child.on 'close', exit\n  # child.on 'exit', exit\n\n  child.on 'error', done\n\n  child\n","import {spawnSync} from 'child_process'\n\nimport parse      from './parse'\nimport {logError} from './utils'\n\nexport default (cmd, opts, cb) ->\n  [cmd, args, opts] = parse cmd, opts\n\n  {\n    pid\n    output\n    stdout\n    stderr\n    status\n    signal\n    error\n  } = spawnSync cmd, args,\n    cwd:        opts.cwd\n    input:      opts.input\n    stdio:      opts.stdio ? [0, 'pipe', 'pipe']\n    env:        opts.env\n    uid:        opts.uid\n    gid:        opts.gid\n    timeout:    opts.timeout\n    killSignal: opts.killSignal\n    maxBuffer:  opts.maxBuffer\n    encoding:   opts.encoding ? 'utf8'\n\n  opts\n\n  unless opts.quiet\n    process.stdout.write stdout\n    process.stderr.write stderr\n\n  if not error? and status != 0\n    error = new Error \"Command failed, '#{cmd}' exited with status #{status}\"\n\n  if error?\n    error.status = status\n    error.pid    = pid\n    error.signal = signal\n    error.stderr = stderr\n    error.stdout = stdout\n    logError error unless opts.quiet\n\n  cb error, stdout, stderr, status\n\n  status: status\n  stderr: stderr\n  stdout: stdout\n  error:  error\n","import {isFunction, isPromise, isString} from 'es-is'\n\nexport serial = (fn, cmds, opts, cb) ->\n  errAll     = ''\n  outAll     = ''\n  lastStatus = null\n\n  append = (res = {}) ->\n    {stdout, stderr, status} = res\n\n    if stdout?\n      outAll += stdout\n    if stderr?\n      errAll += stderr\n\n    if status?\n      lastStatus = status\n    else\n      lastStatus = 0\n\n  do next = ->\n    unless cmds.length\n      return cb null, outAll, errAll, lastStatus\n\n    cmd = cmds.shift()\n\n    if isString cmd\n      fn cmd, opts, (err, stdout, stderr, status) ->\n        outAll    += stdout\n        errAll    += stderr\n        lastStatus = status\n\n        if opts.strict and err?\n          cb err, outAll, errAll, lastStatus\n        else\n          next()\n\n    else if isPromise cmd\n      cmd\n        .then (val) ->\n          append val\n          next()\n        .catch (err) ->\n          cb err, outAll, errAll, 1\n\n    else if isFunction cmd\n      try\n        val = cmd()\n        if (isPromise val) or (isString val)\n          cmds.unshift val\n        else\n          append val\n        next()\n      catch err\n        cb err, outAll, errAll, 1\n\n    else\n      cb new Error \"Not a valid command: #{cmd.toString()}\"\n\nexport parallel = (fn, cmds, opts, cb) ->\n  outAll = ''\n  errAll = ''\n  errors = []\n  todo   = cmds.length\n\n  append = (res = {}) ->\n    {stdout, stderr, status} = res\n\n    if stdout?\n      outAll += stdout\n    if stderr?\n      errAll += stderr\n\n    if status?\n      status\n    else\n      0\n\n  done = (err, status = 0) ->\n    if err?\n      unless opts.quiet\n        console.error err\n        console.error err.stack\n      errors.push err\n\n    return if --todo\n\n    if errors.length\n      err = new Error 'Partial completion'\n      err.errors = errors\n      status = 1\n\n    cb err, outAll, errAll, status\n\n  while cmds.length\n    cmd = cmds.shift()\n\n    if isString cmd\n      fn cmd, opts, (err, stdout, stderr, status) ->\n        append stdout: stdout, stderr: stderr\n        done err, status\n    else if isFunction cmd\n      try\n        val = cmd()\n        if isPromise val\n          cmds.push val\n        else if isString val\n          cmds.push val\n        else\n          append val\n          done null, 0\n      catch err\n        done err\n\n    else if isPromise cmd\n      cmd\n        .then  (val) ->\n          append val\n          done null, 0\n        .catch (err) ->\n          done err\n\n  return\n","import {isArray, isFunction, isString} from 'es-is'\n\nimport exec               from './exec'\nimport execSync           from './execSync'\nimport {parallel, serial} from './flow'\n\nexport default (cmds, opts, cb) ->\n  # Split string of commands\n  if isString cmds\n    cmds = (cmds.split '\\n').filter (c) -> c != ''\n\n  # We also work with an array of commands\n  unless isArray cmds\n    cmds = [cmds]\n\n  # Opts is optional\n  if isFunction opts\n    [cb, opts] = [opts, {}]\n\n  opts ?= {}\n\n  # Pick async control flow mechanism and executor, defaults to async serial\n  executor = exec\n  flow     = serial\n\n  # execSync requested\n  if opts.sync\n    executor = execSync\n\n  # Parallel execution requested\n  if opts.parallel\n    flow = parallel\n\n  # Handle Node.js style callbacks\n  if cb and isFunction cb\n    return flow executor, cmds, opts, cb\n\n  # Blocking exec\n  if opts.sync\n    out = ''\n    err = ''\n\n    return flow executor, cmds, opts, (err, stdout, stderr, status) ->\n      return unless opts.syncThrows\n\n      if opts.strict and status != 0\n        throw err\n      else if err? and not status?\n        throw err\n\n  # Promise API expected\n  new Promise (resolve, reject) ->\n    flow executor, cmds, opts, (err, stdout, stderr, status) ->\n      if opts.strict and status != 0\n        return reject err\n      else if err? and not status?\n        return reject err\n\n      resolve\n        stdout: stdout\n        stderr: stderr\n        status: status\n","import {isFunction} from 'es-is'\n\nimport executive    from './executive'\n\n# Setup defaults for various shortcut helpers\npartial = (defaults) ->\n  (cmds, opts, cb) ->\n    if isFunction opts\n      [cb, opts] = [opts, {}]\n\n    opts = Object.assign {}, defaults, opts ? {}\n\n    executive cmds, opts, cb\n\n# Defaults\nwrapper = partial quiet: false, interactive: false, sync: false\n\nwrapper.interactive = partial interactive: true\nwrapper.parallel    = partial parallel:    true\nwrapper.serial      = partial parallel:    false\nwrapper.quiet       = partial quiet:       true\nwrapper.sync        = partial sync:        true\n\nexport default wrapper\n"],"names":["BufferStream"],"mappings":"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"}