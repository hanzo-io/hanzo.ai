{"version":3,"file":"sake-version.js","sources":["../src/outdated.coffee","../src/index.coffee"],"sourcesContent":["import semver from 'semver'\n\nexport default ->\n  new Promise (resolve, reject) ->\n    exec.quiet 'npm outdated --json'\n      .then ({stdout}) ->\n        return resolve null if stdout == ''\n\n        deps     = JSON.parse stdout\n        outdated = []\n\n        for k,v of deps\n          # Refuse to allow versions to be updated if all dependencies are not\n          # installed.\n          if v.latest == 'MISSING'\n            return reject new Error 'Missing dependencies'\n\n          # Skip linked and/or git packages, we're not THAT smart\n          continue if v.wanted && v.latest == 'git'\n          continue if v.wanted == v.latest == 'linked'\n\n          if semver.gt v.current, v.wanted\n            outdated.push\n              name:    k\n              current: v.current\n              wanted:  v.wanted\n\n        if outdated.length\n          resolve outdated\n        else\n          resolve null\n\n      .catch (err) ->\n        reject (err)\n","import fs   from 'fs'\nimport path from 'path'\n\nimport outdated from './outdated'\n\nexport default (opts = {}) ->\n  task 'version:major', 'increment major version', ['version'], ->\n  task 'version:minor', 'increment minor version', ['version'], ->\n  task 'version:patch', 'increment patch version', ['version'], ->\n\n  task 'version', 'change version of project', (opts) ->\n    {stdout, stderr} = yield exec.quiet 'git status --porcelain'\n    if stderr or stdout\n      console.log 'working directory not clean'\n      process.exit 1\n\n    # Check for outdated deps\n    if (deps = yield outdated())?\n      for dep in deps\n        console.error \"#{dep.name} #{dep.current} is installed but #{dep.wanted} is specified in package.json\"\n      process.exit 1\n\n    # Run build process\n    if opts.before? and tasks.has opts.before\n      yield invoke opts.before\n\n    dir        = process.cwd()\n    pkgPath    = path.join dir, 'package.json'\n    readmePath = path.join dir, 'README.md'\n\n    pkg        = require pkgPath\n    version    = pkg.version\n\n    level = (opts.arguments.filter (v) -> v isnt 'version')[0]\n    [major, minor, patch] = (parseInt n for n in version.split '.')\n\n    switch level\n      when 'version:major', 'major'\n        newVersion = \"#{major + 1}.0.0\"\n      when 'version:minor', 'minor'\n        newVersion = \"#{major}.#{minor + 1}.0\"\n      when 'version:patch', 'patch'\n        newVersion = \"#{major}.#{minor}.#{patch + 1}\"\n      else\n        console.log 'Unable to parse versioning'\n        process.exit 1\n\n    console.log \"v#{version} -> v#{newVersion}\"\n    console.log\n\n    data = fs.readFileSync readmePath, 'utf8'\n    data = data.replace (new RegExp version, 'g'), newVersion\n    fs.writeFileSync readmePath, data, 'utf8'\n\n    pkg.version = newVersion\n    fs.writeFileSync pkgPath, (JSON.stringify pkg, null, 2), 'utf8'\n\n    yield exec \"\"\"\n    git add .\n    git commit -m #{newVersion}\n    git tag v#{newVersion}\n    \"\"\"\n"],"names":[],"mappings":"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"}