import path from 'path';

// src/index.coffee
var index = function(opts = {}) {
  var err, stylus;
  if (opts.plugins == null) {
    opts.plugins = [];
  }
  if (opts.sourceMap == null) {
    opts.sourceMap = true;
  }
  try {
    stylus = require('stylus');
  } catch (error) {
    err = error;
    console.error('Stylus unavailable, `npm install stylus` to transform Stylus files');
    return {
      name: 'stylup-disabled'
    };
  }
  return {
    name: 'stylup',
    transform: function(code, id) {
      var i, len, plugin, ref, relativePath, style;
      if ((path.extname(id)) !== '.styl') {
        return;
      }
      relativePath = path.relative(process.cwd(), id);
      style = stylus(code);
      style.set('filename', relativePath);
      if (opts.sourceMap) {
        style.set('sourcemap', {
          comment: false
        });
      }
      ref = opts.plugins;
      for (i = 0, len = ref.length; i < len; i++) {
        plugin = ref[i];
        try {
          style.use(plugin);
        } catch (error) {
          err = error;
          console.error('Failed to use plugin', plugin.toString());
          throw err;
        }
      }
      return new Promise(function(resolve, reject) {
        return style.render(function(err, css) {
          if (err != null) {
            return reject(err);
          }
          return resolve({
            id: `${id}.css`,
            code: `export default ${JSON.stringify(css)};`,
            map: style.sourcemap
          });
        });
      });
    }
  };
};

export default index;
//# sourceMappingURL=lib.mjs.map
