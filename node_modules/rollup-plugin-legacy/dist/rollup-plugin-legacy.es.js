import { resolve } from 'path';

var validName = /^[a-zA-Z_$][a-zA-Z$_0-9]*$/;

function legacy ( options ) {
	var exports = {};
	Object.keys( options ).forEach( function (file) {
		exports[ resolve( file ) ] = options[ file ];
	});

	return {
		name: 'legacy',

		transform: function transform ( code, id ) {
			if ( id in exports ) {
				var value = exports[ id ];

				if ( typeof value === 'string' ) {
					// default export
					code += "\nexport default " + value + ";";
				}

				else {
					var statements = [];
					var i = 1;

					Object.keys( value ).forEach( function (key) {
						var name = value[ key ];

						if ( name === key ) {
							statements.push( ("export { " + key + " };") );
						}

						else if ( validName.test( name ) ) {
							statements.push( ("export { " + name + " as " + key + " };") );
						}

						else {
							statements.push( ("var __export" + i + " = " + name + ";\nexport { __export" + i + " as " + key + " };") );
							i += 1;
						}
					});

					code += "\n" + (statements.join( '\n' ));
				}

				return {
					code: code,
					map: { mappings: '' } // TODO need a way to say 'sourcemap hasn't changed
				};
			}
		}
	};
}

export default legacy;
